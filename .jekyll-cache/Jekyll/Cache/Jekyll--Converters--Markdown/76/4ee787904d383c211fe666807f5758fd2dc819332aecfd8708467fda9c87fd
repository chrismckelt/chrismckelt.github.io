I"Y<p>open System</p>

<p>#light // Hello world let a = “Hello, world!”;</p>

<p>let mutable b = 0;
while b &lt; 10 do b &lt;- b+1
     Console.WriteLine(a + b.ToString())</p>

<table>
  <tbody>
    <tr>
      <td>Console.ReadLine()</td>
      <td>&gt; ignore</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>// recursive binary search  - http://rosettacode.org/wiki/Binary_search#F.23 let items = [</td>
      <td>10; 20; 30; 40; 50; 60; 70; 80; 90; 100;</td>
      <td>]</td>
    </tr>
  </tbody>
</table>

<p>let rec binarySearch (arr:int[], low:int, high:int, value:int) =
    if (high &lt; low) then
        false
    else
        let mid = (low + high) / 2</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    if (arr.\[mid\] &gt; value) then binarySearch (arr, low, mid-1, value)
    else if (arr.\[mid\] &lt; value) then binarySearch (arr, mid+1, high, value)
    else
        true
</code></pre></div></div>

<p>let result = binarySearch (items, 0, 10, 80);
let any_to_string = sprintf “%A” printf “Binary Search found: %s\n” (any_to_string result);</p>

<table>
  <tbody>
    <tr>
      <td>Console.ReadLine()</td>
      <td>&gt; ignore</td>
    </tr>
  </tbody>
</table>

<p>// run for one minute let time = DateTime.Now.AddHours(0.5).Ticks;
let mutable continueRunning = true
let dt = DateTime.Now.AddMinutes(1.0)
while continueRunning do
    let currentTime = System.DateTime.Now.ToString()
    Console.WriteLine currentTime |&gt; ignore
    if System.DateTime.Now.Ticks &gt; dt.Ticks then continueRunning &lt;- false</p>
:ET