I"˜<p>Download Project source files:<a href="/file.axd?file=FakeRepositoryExample.zip">ExampleFakeRepository.zip</a></p>

<h3 id="introduction">Introduction</h3>

<p>Here is a simple example of how to use fake repositories in test driven development.</p>

<p>By using Fake Repositories generated from a binary file we are able to quickly use â€˜real dataâ€™ in all our tests.</p>

<p>It is a Visual Studio 2008 solution and uses the Castle projectâ€™s <a href="http://www.castleproject.org/" title="http://www.castleproject.org/">Active Record</a> as an ORM.</p>

<h3 id="step-1--our-core-model">Step 1 â€“ Our Core Model</h3>

<p>Â </p>

<p>Our model will consist of 3 classes</p>

<ul>
  <li>SuperHero e.g. Superman
    <ul>
      <li>SupeHeroId</li>
      <li>RealName</li>
      <li>SuperHeroName</li>
    </ul>
  </li>
  <li>Power e.g. Flight
    <ul>
      <li>PowerId</li>
      <li>PowerName</li>
    </ul>
  </li>
  <li>SuperHeroPower e.g. Supermanâ€™s flight
    <ul>
      <li>SuperHeroPowerId</li>
      <li>Comments (e.g. Faster than a speeding bullet)</li>
    </ul>
  </li>
</ul>

<p>Each of our classes implements an Interface called <em>IIdRetriever</em></p>

<p>/// &lt;summary&gt; /// This was created so that the BaseRepositoryFake class can provide a standard /// implementation for fake repositories despite not knowing what property holds /// the Id. /// &lt;/summary&gt; public interface IIdRetriever { int GetId(); void SetId(int id); }</p>

<p>First we define a base interface that defines all our methods needed for an â€˜in-memoryâ€™ database</p>

<p>This base interface is called <em>IRepository</em></p>

<p>public interface IRepository<T>
where T : class
{
T Save(T item);
T SaveOrUpdate(T item);
T Get(object
id);
long
Count();
ICollection<T>
FindAll(params ICriterion[]
criteria);
void
Delete(T item);</T></T></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>}    Â 
</code></pre></div></div>

<p>Now for each class we need a repository so we define 3 repository interfaces that implement the <em>IRepository</em> interface with their corresponding class</p>

<ul>
  <li>ISuperHeroRepository</li>
  <li>IPowerRepository</li>
  <li>ISuperHeroPowerRepository</li>
</ul>

<p>public interface ISuperHeroRepository : IRepository&lt;SuperHero&gt;{}</p>

<p>Â </p>

<p>Now for the concrete implementations of our repositories the following classes are created</p>

<p>Â </p>

<ul>
  <li>SuperHeroRepository</li>
  <li>PowerRepository</li>
  <li>SuperHeroPowerRepository</li>
</ul>

<p>public class PowerRepository : ARRepository&lt;Power&gt;, IPowerRepository{}</p>

<h3 id="step-2--create-the-database-populate-data-and-generate-the-binary-file">Step 2 â€“ Create the database, populate data and generate the binary file</h3>

<p>In the attached project there is a command line utility project that accepts 3 arguments</p>

<ul>
  <li>CreateSchema â€“ will create the tables in the designated database in the app.config</li>
  <li>PopulateData â€“ will populate the tables with some sample data</li>
  <li>GenerateBinary â€“ will get our â€˜coreâ€™ object which contains relations to all our data and binary serialize it into a file</li>
</ul>

<h3 id="step-3--creating-our-fakes-for-use-in-tests">Step 3 â€“ Creating our fakes for use in tests</h3>

<p>We will now create fake â€˜in-memoryâ€™ repositories which use the pre-populated binary data for use in out tests</p>

<p>Firstly there are some integration tests in the database which ensure the add/edit behaviour is correct when talking to the database.</p>

<p>Secondly there is a folder entitled <em>Fakes</em></p>

<p>The main file here is the BaseRepositoryFake which contains all our base methods to mimic a database â€“ yet in memory through an internal collection. By inheriting this class our other fake repositories get the ability to Save,SaveOrUpdate,Delete and find all.</p>

<p>Our inheriting fake repositories are as follows</p>

<ul>
  <li>SuperHeroPowerRepositoryFake</li>
  <li>PowerHeroRepositoryFake</li>
  <li>SuperHeroPowerRepositoryFake</li>
</ul>

<p>These simply inherit the BaseRepositoryFake and implement their corresponding interface</p>

<p>public class SuperHeroRepositoryFake : BaseRepositoryFake&lt;SuperHero&gt;, ISuperHeroRepository</p>

<p>An explanation of the files in the root of the Tests project</p>

<ul>
  <li>ActiveRecordFixture â€“ singleton one time setup for active record</li>
  <li>RandomHelper â€“ Set Ids and values for our fake objects (As SQL Server identity columns these will be seeded in the DB)</li>
  <li>SeededRepositoryFakes â€“ contains a fake representation of each repository (e.g. SuperHeroRepository) â€“ data is read from the binary file in these</li>
  <li>SeededRepositoryFakesCountTest â€“ test to ensure the SeededRepositoryFakes are filled</li>
  <li>SuperHeroSeed â€“ class that reads from the binary file</li>
</ul>

<p>Â </p>

<p>Download the above sample and run the tests to see this all in action.</p>
:ET