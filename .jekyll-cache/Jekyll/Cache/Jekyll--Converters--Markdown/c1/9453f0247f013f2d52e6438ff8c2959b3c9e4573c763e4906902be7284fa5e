I"â<h1 id="a-quick-experiment-with-spec-flow--httpwwwspecfloworg">A quick experiment with Spec Flow â€“ <a href="http://www.specflow.org/" title="http://www.specflow.org/">http://www.specflow.org/</a></h1>

<h2 id="spec-flow-feature">Spec flow feature</h2>

<p>Â </p>

<p>Feature: Run Specification rules
    To stop large postage costs
    As a user
    I want to be stopped from buying to much if I am in Australia</p>

<p>@CountryAllowedToProcessOrderWithLargeCost Scenario: Orders of 20 cannot be sent to Australia</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Given I have a customer with an order for socks
And the order is to be sent to Australia
When I process the order
Then I should not be able to place the order
</code></pre></div></div>

<p>Â </p>

<h2 id="spec-flow-acceptance-test">Spec flow acceptance test</h2>

<p>Â </p>

<p>using System;</p>

<p>using System.Text;</p>

<p>using System.Collections.Generic;</p>

<p>using System.Linq;</p>

<p>using Core;</p>

<p>using Core.OrderStates;</p>

<p>using Microsoft.VisualStudio.TestTools.UnitTesting;</p>

<p>using TechTalk.SpecFlow;</p>

<p>namespace AcceptanceTests.StepDefinitions</p>

<p>{</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\[Binding\]

public class StepDefinitions

{

    private Customer customer;

    private Order order;

    private Product product;

    private bool orderOk;

    \[Given(@"I have a customer with an order for socks")\]

    public void GivenIHaveACustomerWithAnOrderForSocks()

    {

        customer = new Customer(){FirstName = "chris", LastName = "mckelt"};

        product = new SockProduct() {Id = 1, Name = "AAA", Price = 30};

        order = new Order(customer);

        order.AddProduct(product);

    }

    \[Given(@"the order is to be sent to Australia")\]

    public void GivenTheOrderIsToBeSentToAustralia()

    {

        order.SetShippingDestination(ShippingDestination.Australia);

    }

    \[Then(@"I should not be able to place the order")\]

    public void ThenIShouldNotBeAbleToPlaceTheOrder()

    {

        Assert.IsFalse(orderOk);

    }

    \[When(@"I process the order")\]

    public void WhenIProcessTheOrder()

    {

        orderOk = order.CanBecome(new OrderConfirmed());

    }

}
</code></pre></div></div>

<p>}</p>

<p>Â </p>

<p>The state change from â€˜order placedâ€™ to â€˜order confirmedâ€™ is not allowed due to 2 specifications</p>

<p>public ISpecification<Order> CreateCanBecomeSpecification(IOrderState newState)</Order></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {

      ISpecification&lt;Order&gt; spec = new CustomerNameCannotBeEmptySpecification();

      spec = spec.And(new ShippingToAustraliaWithPriceOver20NotAllowedSpecification());

      return spec;

  }
</code></pre></div></div>

<p><a href="www.mckelt.com/blog/file.axd?file=SpecificationPatternExample.zip">Download code</a></p>
:ET