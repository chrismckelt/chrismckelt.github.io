I"◊<p>In the <a href="/blog/?p=668">previous post</a> we built a machine learning model using <a href="http://dot.net/ml">ML.Net</a>, in this post we will deploy the model to an Azure app and allow it to be used via a HTTP API</p>

<p>Using the output model in zip format ‚Äòvita-model-1.zip‚Äô we can include this in our web application as an embedded resource or simply include the file for deployment.</p>

<p>To use the file from a HTTP endpoint:</p>

<ol>
  <li>Include the zip file in your deployment ‚Äì embedded resource/content/read from blob storage etc..</li>
  <li>Initialise the model as a singleton during application start up by using a file path or stream</li>
  <li>Call the model using the function PredictionModel.Predict(‚Äòmy data from which to predict‚Äô)</li>
</ol>

<p>Sample below that logs to <a href="https://logz.io/">Logz.io</a></p>

<p>[Produces(‚Äúapplication/json‚Äù)]
 [Route(‚Äú[controller]‚Äù)]
    public class PredictionController : Controller
    {
        private readonly IPredict _predictor;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    public PredictionController(IPredict predictor)
    {
        \_predictor = predictor;
    }
</code></pre></div></div>

<p>[HttpPost(‚Äúpredict/‚Äù)]
 [SwaggerResponse(HttpStatusCode.OK, typeof(string))]
        public async Task<IActionResult> Search(PredictionRequest request)
        {
            Guard.AgainstNull(request);
            var requestId = Guid.NewGuid();
            using (LogContext.PushProperty("request", request.ToJson()))
            using (LogContext.PushProperty("requestId", requestId))
            {
                try
                {
                    var result = await \_predictor.PredictAsync(request);
                    return Ok(result);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    Log.Warning(e, "PredictionController error {request}", request.ToJson());
                    return NoContent();
                }
            }
        }
    }</IActionResult></p>

<p><a href="https://chargeid-api-test.azurewebsites.net/swagger/index.html?url=/swagger/v1/swagger.json#!/Prediction/Prediction_Search">Hosting our endpoint</a> with Swagger on Azure allows us to test the inputs and see the results below:</p>

<p>T<a href="/https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2018/08/image-3.png"><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//image_thumb-3.png" alt="image" title="image" /></a></p>

<hr />

<h3 id="conclusion">Conclusion</h3>

<p>Here we hosted our model in Azure using an App Service and managed to test it via Swagger.</p>

<p>Hoping to make this a Function App when this issue is resolved ‚Äì&gt; <a href="https://github.com/dotnet/machinelearning/issues/569" title="https://github.com/dotnet/machinelearning/issues/569">https://github.com/dotnet/machinelearning/issues/569</a></p>

<p>¬†</p>

<p>¬†</p>

<hr />

<p>¬†</p>

<h2 id="posts-in-this-series">Posts in this series</h2>

<p><a href="/blog/?p=460">Charge Id ‚Äì scratching the tech itch [ part 1 ]</a> <a href="/blog/?p=485">Charge Id ‚Äì lean canvas [ part 2 ]</a> <a href="/blog/?p=505">Charge Id ‚Äì solution overview [ part 3 ]</a> <a href="/blog/?p=507">Charge Id ‚Äì analysing the data [ part 4 ]</a> <a href="/blog/?p=668">Charge Id ‚Äì the prediction model [ part 5 ]</a> <a href="/blog/?p=705">Charge Id ‚Äì deploying a ML.Net Model to Azure [ part 6 ]</a></p>

<p>¬†</p>

<h2 id="code">Code</h2>

<p><a href="https://github.com/chrismckelt/vita" title="https://github.com/chrismckelt/vita">https://github.com/chrismckelt/vita</a></p>
:ET