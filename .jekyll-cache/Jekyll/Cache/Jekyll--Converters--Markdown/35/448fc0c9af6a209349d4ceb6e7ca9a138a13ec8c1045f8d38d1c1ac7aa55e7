I"«<h1 id="series">Series</h1>

<p><a href="https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m">Part 1 - dotnet vs python vs node - temperature emission - who is cooler?</a><br />
<a href="https://dev.to/chris_mckelt/azure-iot-edge-developing-custom-modules-df3">Part 2 - Developing modules</a><br />
<a href="https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3">Part 3 - Custom Containers using Apache Nifi</a><br />
<a href="https://dev.to/chris_mckelt/azure-iot-edge-using-timescaledb-on-the-edge-2ec1">Part 4 - Custom Module using TimescaleDB</a><br />
<a href="https://dev.to/chris_mckelt/azure-iot-edge-using-grafana-on-the-edge-26na">Part 5 - Custom Module using Grafana</a></p>

<h1 id="intro">Intro</h1>

<p>This is part 2 in a series starting <a href="http://blog.mckelt.com/2020/02/13/azure-iot-edge-creating-an-edge-reporting-solution/">here</a> running through an Azure IoT Edge demo solution located at: <a href="https://github.com/chrismckelt/edgy">https://github.com/chrismckelt/edgy</a></p>

<p>This part will cover developing and running custom modules written in C#, Python and NodeJS.</p>

<p>It will focus on commands available in the VS Code interface rather than command line arguments as seen at: <a href="https://aka.ms/iotedgedev">https://aka.ms/iotedgedev</a></p>

<h2 id="azure-iot-sdks">Azure IoT SDKs</h2>

<p>Azure IoT Edge has a number of <a href="https://github.com/Azure/azure-iot-sdks">SDKs</a> for module development in your favourite language.Â  The <a href="https://github.com/Azure/azure-iot-sdks">SDK code</a> will handle setting up environment variables and provide the boiler plate code necessary to send and receive messages using multiple <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols">protocols &amp; channelsÂ  (e.g. MQTT, AMQP)</a></p>

<h2 id="setting-up-vs-code-to-run-the-local-simulator"><a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols">Setting up VS Code to run the local simulator</a></h2>

<p>Given the solution is cloned locally and Azure is setup with our IOT Hub we can configure a device to act as a local simulator.</p>

<p>1. Select IOT Hub &amp; choose your IOT Hub</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226837-4390bb80-6bb6-11ea-8a88-e03f10cc02eb.png" alt="" /></p>

<p>2. Create IOT Edge Device - I have named my local device â€˜<em>LocalSimulator</em> â€˜</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226840-4ab7c980-6bb6-11ea-8380-b0656965b968.png" alt="" /></p>

<p>3. Setup IOT Edge Simulator â€“ this will create you edge certs</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226898-bd28a980-6bb6-11ea-99cb-3f5a35dce53a.png" alt="" /></p>

<p>This will generate and install certificates for local development in the following folder &amp; also install the for you <em>note://run VS Code as admin for this</em></p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226845-5905e580-6bb6-11ea-881e-46ca8640529b.png" alt="" /></p>

<h2 id="creating-a-module-for-our-solution">Creating a module for our solution</h2>

<p>Right click on the modules folder and select â€˜Add IoT Edge Moduleâ€™.</p>

<p>This will then ask a module name &amp; language (C,C#,Java,Node.js, Python)</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226850-615e2080-6bb6-11ea-9775-f2a18775b707.png" alt="" /></p>

<p>I have created numerous custom modules for this solution. For this post we focus on the below 6</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226855-67ec9800-6bb6-11ea-9af9-3bf33e1fbc44.png" alt="" /></p>

<h2 id="data-generators">Data Generators</h2>

<p>The demo code shows 3 â€˜data generatorâ€™ modules written in C#, Python &amp; Node JS.</p>

<p>Each module publishes a message every second simulating temperature capture.Â  Properties of the sent message are:</p>

<script src="https://gist.github.com/chrismckelt/0299fe4f6f81f7bebdb2792cec935508.js"></script>

<p>In C# connecting to the Edge Hub and sending messages can be seen in the following code:</p>

<script src="https://gist.github.com/chrismckelt/4a0769a626f433fb25903318b88c5311.js"></script>

<h2 id="data-recorders">Data Recorders</h2>

<p>3 modules in matching languages subscribe to their respective modules published messages</p>

<script src="https://gist.github.com/chrismckelt/9b1a3923f31a657fa3a6ff9f1a9e417a.js"></script>

<p>Messages received are deserialized from JSON format to a POCO and then saved in a database.</p>

<script src="https://gist.github.com/chrismckelt/0fc37bda378ea94f694a2de8c1ca7a6e.js"></script>

<h2 id="routes">Routes</h2>

<p>In order to route messages between modules we use the inbuilt route system in our <a href="https://github.com/chrismckelt/edgy/blob/master/deployment.debug.template.json">deployment template</a> file.</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226859-75a21d80-6bb6-11ea-9723-f7f977688da2.png" alt="" /></p>

<h2 id="web-app--viewer-module">Web App â€“ Viewer module</h2>

<p>Finally to view the messages from a web page I have modified an <a href="https://github.com/Azure-Samples/iot-edge-hmi-module">existing demo to</a> that uses SignalR view all messages sent to it from the below routes:</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226864-7a66d180-6bb6-11ea-8e78-30165268a5d3.png" alt="" /></p>

<p>When running the solution you can view all published messages on the web page below</p>

<p><img src="https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226868-7f2b8580-6bb6-11ea-991e-f88f499d70b7.png" alt="" /></p>

<h2 id="outro">Outro</h2>

<p>Here was a basic overview of an demo solution to create and build your own custom IoT Edge modules.</p>

<p>Next we will introduce an existing docker container (<a href="https://nifi.apache.org/">https://nifi.apache.org/)</a>) to act as a data orchestrator. This will subscribe to all â€˜Payloadâ€™ messages and publish a message to â€˜turn offâ€™ the air conditioner when the temperature is too high.</p>
:ET