I"‹<h4 id="a-simple-implemention-for-calling-asych-methods-from-the-ui">A simple implemention for calling asych methods from the UI</h4>

<p>Â </p>

<h2 id="examples">Examples</h2>

<p>Â </p>

<p>1.</p>

<p>dispatcher.ExecuteOnMainUIThread(CommandManager.InvalidateRequerySuggested);</p>

<p>Â </p>

<p>2.</p>

<p>dispatcher.Execute(() =&gt;
                                        {
                                           SomeLongRunningMethodHere();
                                        });</p>

<p>Â </p>

<h2 id="the-interface">The interface</h2>

<p>using System;</p>

<p>namespace Mvvm { public interface IDispatcher { void Execute(Action action);</p>

<p>void ExecuteOnMainUIThread(Action action); } }</p>

<h2 id="synchronous-for-use-in-testing">Synchronous for use in Testing</h2>

<p>using System;</p>

<p>namespace Mvvm { public class SynchronousDispatcher : IDispatcher { public void Execute(Action action) { action(); }</p>

<p>public void ExecuteOnMainUIThread(Action action) { action(); } }</p>

<p>}</p>

<h2 id="asynchronous-for-use-by-the-application-at-run-time">Asynchronous for use by the application at run time</h2>

<p>using System;</p>

<p>namespace Mvvm { using System.Windows; using System.Windows.Threading;</p>

<p>public class AsynchronousDispatcher : IDispatcher { public void Execute(Action action) { action.BeginInvoke(CallBack, action); }</p>

<p>public void ExecuteOnMainUIThread(Action action) { Dispatcher dispatcher;</p>

<p>if (Application.Current != null) { dispatcher = Application.Current.Dispatcher; } else { dispatcher = Dispatcher.CurrentDispatcher; }</p>

<p>dispatcher.Invoke(action); }</p>

<p>private void CallBack(IAsyncResult result) { try { ((Action)result.AsyncState).EndInvoke(result); } catch (Exception ex) { // Need to raise the exception on the main thread ExecuteOnMainUIThread(() =&gt; { throw ex; } ); } finally { result.AsyncWaitHandle.Close(); }</p>

<p>} } }</p>
:ET