<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2021-06-02T18:20:14-05:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Chris McKelt’s blog</title><subtitle>Remembering Thoughts</subtitle><author><name>Chris McKelt</name></author><entry><title type="html">Using Azure to setup a new blog and domain</title><link href="http://0.0.0.0:4000/2021/01/03/hello-azure-wordpress-blog.html" rel="alternate" type="text/html" title="Using Azure to setup a new blog and domain" /><published>2021-01-03T00:00:00-06:00</published><updated>2021-01-03T00:00:00-06:00</updated><id>http://0.0.0.0:4000/2021/01/03/hello-azure-wordpress-blog</id><content type="html" xml:base="http://0.0.0.0:4000/2021/01/03/hello-azure-wordpress-blog.html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Here is a quick way to setup a new WordPress blog with a custom domain on Azure (optionally using &lt;a href=&quot;https://azure.microsoft.com/en-au/free&quot;&gt;free using credits&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This was used to setup the blog you are reading: &lt;a href=&quot;http://TakesInsight.com&quot;&gt;&lt;strong&gt;TakesInsight.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;azure-resources-overview&quot;&gt;Azure Resources Overview&lt;/h3&gt;

&lt;p&gt;Resources used to setup the blog may be seen below. These were created within a single resource group called ‘blog’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/1-resource-group-view.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wordpress-setup&quot;&gt;WordPress Setup&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;1. After logging into Azure go the the &lt;a href=&quot;https://portal.azure.com/?quickstart=true&quot;&gt;marketplace&lt;/a&gt; and search for WordPress&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/2-wordpress-marketplace.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2. Click &lt;em&gt;create&lt;/em&gt; and begin to enter the details for your blog.  All resources below were created in a new resource group called ‘&lt;em&gt;blog’&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/3-create-from-marketplace.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3. Create a new &lt;em&gt;App Service Plan&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/2-new-app-service-plan.png&quot; alt=&quot;images&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;Here we are using the cheapest pricing tier that allows a custom domain: ‘B1 Basic’ Tier&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/spec-picker.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;4. Configure a new database server using the ‘Basic’ pricing tier&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/database-server.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/pricing-tier.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;5. After clicking the create button a new WordPress App Service will be deployed and available to configure on &lt;em&gt;YourBlogSite.azurewebsites.net&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;Navigate to the website and configure your WordPress instance.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/english.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;6. Next we will setup a custom website domain to use for the blog using &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/manage-custom-dns-buy-domain&quot;&gt;App Service Domains&lt;/a&gt;.&lt;br /&gt;
App Service domains are custom domains that are managed directly in Azure. They make it easy to manage custom domains for &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/overview&quot;&gt;Azure App Service&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://portal.azure.com/?quickstart=true#create/Microsoft.Domain&quot;&gt;Create your App Service Domain&lt;/a&gt; and choose a TLD domain name for your website.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/create-app-services-domain-1.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;7. Enter your contact information required by GoDaddy for domain registration and Azure DNS to host the domains. In addition to the yearly domain registration fee, usage charges for Azure DNS apply. For information, see Azure DNS Pricing.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/create-app-services-domain-2.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;8. Create you App Service Domain, it may take a while for the DNS to propagate and be ready for use&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/app-service-domain-deployment-2.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;9. Go to your App Service Domain and add a hostname binding pointing to the App Service that hosts your WordPress blog.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/2021/01/hostname-bindings.png&quot; alt=&quot;images&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;10. You should now be able to browse to your custom domain and see your WordPress site. Thats it!&lt;/p&gt;

  &lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

  &lt;p&gt;So we now have a WordPress website setup with a custom domain without leaving the Azure portal.&lt;/p&gt;

  &lt;p&gt;Next steps will be:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Create a free SSL certificate via Lets Encrypt to host the site under SSL&lt;/li&gt;
    &lt;li&gt;Follow Azure guidelines to &lt;a href=&quot;https://techcommunity.microsoft.com/t5/azure-database-for-mysql/improving-your-wordpress-workloa-performance-on-azure-database/ba-p/1418717&quot;&gt;improve&lt;/a&gt; WordPress performance&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Please let us know how you go with setting up your own site.&lt;/p&gt;

  &lt;p&gt;Happy blogging!&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><category term="azure" /><category term="blog" /><category term="wordpress" /><summary type="html">Intro</summary></entry><entry><title type="html">Azure IoT Edge - using Grafana on the Edge</title><link href="http://0.0.0.0:4000/2020/05/02/azure-iot-edge-using-grafana-on-the-edge.html" rel="alternate" type="text/html" title="Azure IoT Edge - using Grafana on the Edge" /><published>2020-05-02T00:00:00-05:00</published><updated>2020-05-02T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2020/05/02/azure-iot-edge-using-grafana-on-the-edge</id><content type="html" xml:base="http://0.0.0.0:4000/2020/05/02/azure-iot-edge-using-grafana-on-the-edge.html">&lt;h1 id=&quot;series&quot;&gt;Series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;Part 1 - dotnet vs python vs node - temperature emission - who is cooler?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-developing-custom-modules-df3&quot;&gt;Part 2 - Developing modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3&quot;&gt;Part 3 - Custom Containers using Apache Nifi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-timescaledb-on-the-edge-2ec1&quot;&gt;Part 4 - Custom Module using TimescaleDB&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-grafana-on-the-edge-26na&quot;&gt;Part 5 - Custom Module using Grafana&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;This is part 5 in a series starting &lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;here&lt;/a&gt; that runs through building an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-edge/about-iot-edge&quot;&gt;Azure IOT Edge&lt;/a&gt; solution. This post will run through setting up &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; to visualise temperature readings sent from the dot net, python and node custom edge modules.&lt;/p&gt;

&lt;p&gt;The code is located at: &lt;a href=&quot;https://github.com/chrismckelt/edgy&quot;&gt;https://github.com/chrismckelt/edgy&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; is the open source analytics and monitoring solution for every database&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;steps-to-add-the-module&quot;&gt;Steps to add the module&lt;/h2&gt;

&lt;h3 id=&quot;1-add-a-new-custom-module&quot;&gt;1. add a new &lt;a href=&quot;https://github.com/chrismckelt/edgy/tree/master/modules/Grafana&quot;&gt;custom module&lt;/a&gt; &lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80546306-e1627c00-89e7-11ea-8ceb-434b79aed040.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-add-a-new-deployment-file-just-for-grafana-and-amend-the-full-solution-file&quot;&gt;2. add a new &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/deployment.debug.grafana.template.json&quot;&gt;deployment file&lt;/a&gt; just for Grafana (and amend the &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/deployment.debug.template.json&quot;&gt;full solution file&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80546722-03a8c980-89e9-11ea-8735-051f381f16a3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-create-the-docker-file&quot;&gt;3. create the &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/modules/Grafana/Dockerfile.amd64.debug&quot;&gt;docker file&lt;/a&gt;&lt;/h3&gt;

&lt;h6 id=&quot;from-grafanagrafanalatest&quot;&gt;FROM grafana/grafana:latest&lt;/h6&gt;

&lt;h6 id=&quot;-login-with-admin-and-below-password-to-web-interface&quot;&gt;# login with admin and below password to web interface&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_security_admin_password-your_grafana_password_here&quot;&gt;ENV GF_SECURITY_ADMIN_PASSWORD [&lt;em&gt;YOUR_GRAFANA_PASSWORD_HERE]&lt;/em&gt;&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_auth_ldap_enabledfalse&quot;&gt;ENV GF_AUTH_LDAP_ENABLED=false&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_database_type-postgres&quot;&gt;ENV GF_DATABASE_TYPE postgres&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_database_host-timescaledb&quot;&gt;ENV GF_DATABASE_HOST timescaledb&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_database_name-grafana&quot;&gt;ENV GF_DATABASE_NAME grafana&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_database_user-grafana&quot;&gt;ENV GF_DATABASE_USER grafana&lt;/h6&gt;

&lt;h6 id=&quot;env-gf_database_password-your_database_password_here&quot;&gt;ENV GF_DATABASE_PASSWORD [&lt;em&gt;YOUR_DATABASE_PASSWORD_HERE]&lt;/em&gt;&lt;/h6&gt;

&lt;h6 id=&quot;copy-ldaptoml-etcgrafana&quot;&gt;COPY ldap.toml /etc/grafana/&lt;/h6&gt;

&lt;h6 id=&quot;copy-customini-etcgrafana&quot;&gt;COPY custom.ini /etc/grafana/&lt;/h6&gt;

&lt;h3 id=&quot;4-create-the-customini&quot;&gt;4. create the &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/modules/Grafana/custom.ini&quot;&gt;custom.ini&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;make sure to enter the database password on line 75&lt;/p&gt;

&lt;h3 id=&quot;5-build-and-run-iot-edge-solution-in-simulator&quot;&gt;5. build and run IoT Edge solution in simulator&lt;/h3&gt;

&lt;h6&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80850862-d5c5be00-8c50-11ea-8cda-67a65caf058f.png&quot; alt=&quot;&quot; /&gt;&lt;/h6&gt;

&lt;h3 id=&quot;6-navigate-to-httplocalhost8082-and-login-admin--your-grafana-password&quot;&gt;6. Navigate to &lt;a href=&quot;http://localhost:8082/&quot;&gt;http://localhost:8082/&lt;/a&gt; and login (admin + your grafana password)&lt;/h3&gt;

&lt;p&gt;The Grafana setup board should appear as below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80850936-36ed9180-8c51-11ea-9152-9714976a00f7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-add-data-source--postgresql&quot;&gt;7. Add data source –&amp;gt; PostgreSQL&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80851051-de6ac400-8c51-11ea-9b9c-9498307fcbef.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-add-a-dashboard-query--set-the-query-as-below&quot;&gt;8. Add a dashboard query &amp;amp; set the query as below&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80911764-144f9b80-8d6b-11ea-96cb-1f1c24432b4f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A time series graph will display the 3 temperature readings over time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//80911783-2598a800-8d6b-11ea-9a48-b21db723b8f0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;outro&quot;&gt;Outro&lt;/h1&gt;

&lt;p&gt;Here we have added Grafana to our IoT Edge solution and created a dashboard from the data stored in &lt;a href=&quot;https://www.timescale.com/&quot;&gt;TimescaleDB&lt;/a&gt;. The generated temperature sent from the 3 modules is analysed by &lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3&quot;&gt;Apache Nifi&lt;/a&gt;. When the temperature is greater than 25 degrees a request is sent back to the specific module to activate the air conditioner, which makes the temperature randomly decrease over time.&lt;/p&gt;

&lt;p&gt;Think I would prefer the Python room as it appears the &lt;a href=&quot;https://user-images.githubusercontent.com/662868/80854122-2bf22b80-8c68-11ea-919c-4833ac0847b8.png&quot;&gt;coolest&lt;/a&gt;   &lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//wlEmoticon-smile.png&quot; alt=&quot;Smile&quot; /&gt;&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Series</summary></entry><entry><title type="html">Azure IoT Edge – using TimescaleDB on the Edge</title><link href="http://0.0.0.0:4000/2020/04/12/azure-iot-edge-using-timescaledb-on-the-edge.html" rel="alternate" type="text/html" title="Azure IoT Edge – using TimescaleDB on the Edge" /><published>2020-04-12T00:00:00-05:00</published><updated>2020-04-12T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2020/04/12/azure-iot-edge-using-timescaledb-on-the-edge</id><content type="html" xml:base="http://0.0.0.0:4000/2020/04/12/azure-iot-edge-using-timescaledb-on-the-edge.html">&lt;h1 id=&quot;series&quot;&gt;Series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;Part 1 - dotnet vs python vs node - temperature emission - who is cooler?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-developing-custom-modules-df3&quot;&gt;Part 2 - Developing modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3&quot;&gt;Part 3 - Custom Containers using Apache Nifi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-timescaledb-on-the-edge-2ec1&quot;&gt;Part 4 - Custom Module using TimescaleDB&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-grafana-on-the-edge-26na&quot;&gt;Part 5 - Custom Module using Grafana&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;This is part 4 in a series starting &lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;here&lt;/a&gt; that runs through building an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-edge/about-iot-edge&quot;&gt;Azure IOT Edge&lt;/a&gt; solution. This post will run through setting up &lt;a href=&quot;https://www.timescale.com/&quot;&gt;TimescaleDB&lt;/a&gt; to store data published from the dotnet, python and node temperature modules.&lt;/p&gt;

&lt;p&gt;The code is located at: &lt;a href=&quot;https://github.com/chrismckelt/edgy&quot;&gt;https://github.com/chrismckelt/edgy&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.timescale.com/&quot;&gt;TimescaleDB&lt;/a&gt;: An open-source database built for analysing&lt;/p&gt;

  &lt;p&gt;time-series data with the power and convenience of&lt;/p&gt;

  &lt;p&gt;SQL — on premise, at the edge or in the cloud.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;steps-to-add-the-database&quot;&gt;Steps to add the database&lt;/h2&gt;

&lt;h3 id=&quot;1-add-the-custom-module&quot;&gt;1. add the &lt;a href=&quot;https://github.com/chrismckelt/edgy/tree/master/modules/TimescaleDb&quot;&gt;custom module&lt;/a&gt; &lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//79062247-060de280-7ccb-11ea-901d-7faa07663fd6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-add-the-section-to-the-deployment-file&quot;&gt;2. add the section to the &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/deployment.debug.template.json&quot;&gt;deployment file&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Expose the internal port 5432 that TimescaleDB uses to 8081 for external container use&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/3e3da727c762c8bc038551a8ef683943.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;3-create-the-docker-file&quot;&gt;3. create the &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/modules/TimescaleDb/Dockerfile.amd64.debug&quot;&gt;docker file&lt;/a&gt;&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/efe8e3ed3ae9a61a07a67b9d3454b2dd.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;4-create-the-database-login-and-schema&quot;&gt;4. create the &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/modules/TimescaleDb/init.sql&quot;&gt;database, login and schema&lt;/a&gt;&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/f4e73f67a6903a1f4a0446065fdc6e78.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;5-run-the-container-and-insert-data-from-another-module&quot;&gt;5. run the container and insert data from another module&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/bfe5ece31db7cd6db21d0eb5efdee339.js&quot;&gt;&lt;/script&gt;

&lt;h6 id=&quot;select--from-table_001-where-isairconditioneron--0-order-by-timestamp-desc-limit-100&quot;&gt;select * from “table_001” where Isairconditioneron = 0 ORDER BY “Timestamp” DESC LIMIT 100;&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//79062131-078adb00-7cca-11ea-975e-6885c0ba70ce.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;outro&quot;&gt;Outro&lt;/h1&gt;

&lt;p&gt;Now we have data being saved into the database we can move onto displaying it visually via &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; in the next post.&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Series</summary></entry><entry><title type="html">Azure IoT Edge – using Apache Nifi as a 3rd party container</title><link href="http://0.0.0.0:4000/2020/04/11/azure-iot-edge-3rd-party-containers.html" rel="alternate" type="text/html" title="Azure IoT Edge – using Apache Nifi as a 3rd party container" /><published>2020-04-11T00:00:00-05:00</published><updated>2020-04-11T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2020/04/11/azure-iot-edge-3rd-party-containers</id><content type="html" xml:base="http://0.0.0.0:4000/2020/04/11/azure-iot-edge-3rd-party-containers.html">&lt;h1 id=&quot;series&quot;&gt;Series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;Part 1 - dotnet vs python vs node - temperature emission - who is cooler?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-developing-custom-modules-df3&quot;&gt;Part 2 - Developing modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3&quot;&gt;Part 3 - Custom Containers using Apache Nifi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-timescaledb-on-the-edge-2ec1&quot;&gt;Part 4 - Custom Module using TimescaleDB&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-grafana-on-the-edge-26na&quot;&gt;Part 5 - Custom Module using Grafana&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;This is part 3 in a series starting &lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;here&lt;/a&gt; that runs through building an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-edge/about-iot-edge&quot;&gt;Azure IOT Edge&lt;/a&gt; solution. This post will run through setting up a 3rd party docker container for an edge deployment. &lt;br /&gt;
The code is located at: &lt;a href=&quot;https://github.com/chrismckelt/edgy&quot;&gt;https://github.com/chrismckelt/edgy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to manage data flow &amp;amp; logic on the edge we will deploy a data orchestrator.  There are quite a few &lt;a href=&quot;https://stackshare.io/apache-nifi/alternatives&quot;&gt;choices&lt;/a&gt; on the market – for this demo we will use Apache Nifi &lt;a href=&quot;https://nifi.apache.org/&quot;&gt;https://nifi.apache.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nifi.apache.org/&quot;&gt;Apache Nifi&lt;/a&gt; describes itself as ‘&lt;em&gt;An easy to use, powerful, and reliable system to process and distribute data&lt;/em&gt;.’&lt;/p&gt;

&lt;h4 id=&quot;what-will-this-module-do&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#what-will-this-module-do&quot;&gt;&lt;/a&gt;What will this module do?&lt;/h4&gt;

&lt;p&gt;The Nifi module will listen to the dot net, python &amp;amp; node module messages and when a temperature exceeds 25°C it will publish a message to activate the air conditioning.  The over heating module will receive the message and turn the air conditioning on, thus decrease the temperature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--m-n00mc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78258726-3963ab00-752e-11ea-91fa-90ff4d0e13a7.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78258726-3963ab00-752e-11ea-91fa-90ff4d0e13a7.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This work was inspired by the following project:&lt;br /&gt;
&lt;a href=&quot;https://github.com/iotblackbelt/nifimodule&quot;&gt;https://github.com/iotblackbelt/nifimodule&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-up-nifi&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#setting-up-nifi&quot;&gt;&lt;/a&gt;Setting up Nifi&lt;/h3&gt;

&lt;p&gt;To connect Nifi to the edge hub MQTT/AMQP broker (and not using the inbuilt &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-sdks&quot;&gt;SDKs&lt;/a&gt; with code), we need to authenticate with self signed certificates.&lt;/p&gt;

&lt;p&gt;The easiest way to use self signed certificates for Azure IoT Edge is to follow this tutorial &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-edge/tutorial-machine-learning-edge-05-configure-edge-device&quot;&gt;https://docs.microsoft.com/en-us/azure/iot-edge/tutorial-machine-learning-edge-05-configure-edge-device&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use the docker image provided in that tutorial to generate my self signed certs. After following the tutorial I upload the ROOT CA to the Azure IoT Hub. After verification it should appear as below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--8duHmcbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78261684-1a671800-7532-11ea-932b-eda711d33355.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78261684-1a671800-7532-11ea-932b-eda711d33355.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When working &lt;strong&gt;locally&lt;/strong&gt; with the simulator you will use the generated certs from VS Code. These are found at &lt;em&gt;C:\ProgramData\iotedgehubdev&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--i60s7EvV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78262241-dfb1af80-7532-11ea-82a1-d25141004479.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78262241-dfb1af80-7532-11ea-82a1-d25141004479.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;deployment-files&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#deployment-files&quot;&gt;&lt;/a&gt;Deployment files&lt;/h4&gt;

&lt;p&gt;For debugging purposes I made a deployment file that runs only the &lt;em&gt;DotNetGenerator&lt;/em&gt; &amp;amp; &lt;em&gt;Nifi&lt;/em&gt;.   The sections below are also in the full local debug and production template.&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--qsmDNdBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78413894-1c24fe80-764c-11ea-8bd6-0d4fbea22bad.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78413894-1c24fe80-764c-11ea-8bd6-0d4fbea22bad.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;nifi-config-setup&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#nifi-config-setup&quot;&gt;&lt;/a&gt;Nifi config setup&lt;/h4&gt;

&lt;p&gt;When the Nifi docker file starts it will execute a &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/modules/Nifi/local.sh&quot;&gt;script&lt;/a&gt; to do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;copy existing files from the local computer using docker bind from c:/config  to /config&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78266974-0bd02f00-7539-11ea-8afb-e49490273913.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;copy the self signed certificates to the Java cert store&lt;/li&gt;
  &lt;li&gt;restart Nifi so the certs and new configuration apply&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;nifi-authentication&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#nifi-authentication&quot;&gt;&lt;/a&gt;Nifi authentication&lt;/h4&gt;

&lt;p&gt;To connect and publish messages to the MQTT broker we add the following processors in our Nifi flow&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ConsumeMQTT&lt;/li&gt;
  &lt;li&gt;PublishMQTT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--8B39VofP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78415336-b3da1b00-7653-11ea-8704-90bfe2007a5a.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78415336-b3da1b00-7653-11ea-8704-90bfe2007a5a.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon adding a processor you will need to enter the connection details and configure a &lt;em&gt;SSL Context Service&lt;/em&gt;  to connect to the edge hub broker.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--nw1I_S7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78415309-7bd2d800-7653-11ea-8683-ff076cd14baf.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78415309-7bd2d800-7653-11ea-8683-ff076cd14baf.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;ssl-context-service-setting-certs-used-are-stored-in-the-java-cert-store&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#ssl-context-service-setting-certs-used-are-stored-in-the-java-cert-store&quot;&gt;&lt;/a&gt;SSL Context Service setting (certs used are stored in the Java cert store)&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--088Jx9uQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78415387-fac81080-7653-11ea-8d80-4f8fbdb1307b.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78415387-fac81080-7653-11ea-8d80-4f8fbdb1307b.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;settings&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#settings&quot;&gt;&lt;/a&gt;Settings&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--DP2tsLYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78469090-5bd50e80-7750-11ea-8222-b22a6d8947c8.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78469090-5bd50e80-7750-11ea-8222-b22a6d8947c8.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;to-generate-a-sas-token-right-click-on-the-device-and-select-generate-sas-token-for-device&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#to-generate-a-sas-token-right-click-on-the-device-and-select-generate-sas-token-for-device&quot;&gt;&lt;/a&gt;To generate a SAS token, right click on the device and select ‘Generate SAS Token for Device’&lt;/h6&gt;

&lt;h6&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#%C2%A0&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78415646-9c039680-7655-11ea-8d6c-5781fbdb4171.png&quot; alt=&quot;&quot; /&gt;&lt;/h6&gt;

&lt;h4 id=&quot;nifi-logic-to-air-con-control&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#nifi-logic-to-air-con-control&quot;&gt;&lt;/a&gt;Nifi logic to air con control&lt;/h4&gt;

&lt;p&gt;Using the inbuilt IoT routing system temperature payloads published from dot net, python &amp;amp; node will be pushed to Nifi.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--AME5Gc1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78415724-4aa7d700-7656-11ea-9047-1d3f03e01ca8.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78415724-4aa7d700-7656-11ea-9047-1d3f03e01ca8.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nifi checks if the temperature recording exceeds 25°C.  When this occurs it will publish its own message which is routed back to the overheating module requesting it to turn on the air con.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--MfFqHGQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78273205-1989b280-7541-11ea-92c4-eb9f92153fa2.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78273205-1989b280-7541-11ea-92c4-eb9f92153fa2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Nifi this translates to the following processor flows (probably a better way to do this – Nifi experts?)&lt;/p&gt;

&lt;h4 id=&quot;nifi-flows&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#nifi-flows&quot;&gt;&lt;/a&gt;Nifi flows&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--eGBp_KdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78217920-85432f80-74ef-11ea-80db-e92bd4f2b850.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78217920-85432f80-74ef-11ea-80db-e92bd4f2b850.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;running-the-solution-locally&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#running-the-solution-locally&quot;&gt;&lt;/a&gt;Running the solution locally&lt;/h4&gt;

&lt;p&gt;Upon starting the solution each module will publish a temperature starting at 20°C .   Nifi will receive each message via the Consume MQTT processor.  Viewing the data provenance shows all received messages:&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--Z5jFn1JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78442149-d8151680-76aa-11ea-9f33-504390a7487b.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78442149-d8151680-76aa-11ea-9f33-504390a7487b.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The modules keep publishing increasing temperatures until Nifi received a temperature over 25°C.  Nifi then publishes a message requesting the respective module (e.g. &lt;em&gt;PythonDataGenerator&lt;/em&gt;) to decrease the temperature (turn on the air con).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--fGq9xMoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/662868/78723470-0e2df100-795e-11ea-8ebf-75294a7beb1c.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78723470-0e2df100-795e-11ea-8ebf-75294a7beb1c.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;watch-out-when-publishing-your-container-to-acr&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#watch-out-when-publishing-your-container-to-acr&quot;&gt;&lt;/a&gt;Watch out when publishing your container to ACR&lt;/h4&gt;

&lt;p&gt;Be careful when publishing your local containers to your remote container registry.  I was publishing direct from my machine to my Azure Container Registry. Meanwhile the environment variables were set to look for certificates in the wrong place. So Nifi would not authenticate.&lt;/p&gt;

&lt;h4 id=&quot;-1&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//78264086-5354bc00-7535-11ea-854d-f468f1f45e44.png&quot; alt=&quot;&quot; /&gt;&lt;/h4&gt;

&lt;h3 id=&quot;outro&quot;&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3#outro&quot;&gt;&lt;/a&gt;Outro&lt;/h3&gt;

&lt;p&gt;Here we have shown how to build and deploy a 3rd party container in our edge solution.  Once we have the installed the custom certificates Nifi can authenticate to the edge hub and send/receive messages.&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Series</summary></entry><entry><title type="html">Azure IoT Edge - Developing custom modules</title><link href="http://0.0.0.0:4000/2020/03/10/azure-iot-edge-developing-custom-modules.html" rel="alternate" type="text/html" title="Azure IoT Edge - Developing custom modules" /><published>2020-03-10T00:00:00-05:00</published><updated>2020-03-10T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2020/03/10/azure-iot-edge-developing-custom-modules</id><content type="html" xml:base="http://0.0.0.0:4000/2020/03/10/azure-iot-edge-developing-custom-modules.html">&lt;h1 id=&quot;series&quot;&gt;Series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;Part 1 - dotnet vs python vs node - temperature emission - who is cooler?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-developing-custom-modules-df3&quot;&gt;Part 2 - Developing modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3&quot;&gt;Part 3 - Custom Containers using Apache Nifi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-timescaledb-on-the-edge-2ec1&quot;&gt;Part 4 - Custom Module using TimescaleDB&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-grafana-on-the-edge-26na&quot;&gt;Part 5 - Custom Module using Grafana&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;This is part 2 in a series starting &lt;a href=&quot;http://blog.mckelt.com/2020/02/13/azure-iot-edge-creating-an-edge-reporting-solution/&quot;&gt;here&lt;/a&gt; running through an Azure IoT Edge demo solution located at: &lt;a href=&quot;https://github.com/chrismckelt/edgy&quot;&gt;https://github.com/chrismckelt/edgy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This part will cover developing and running custom modules written in C#, Python and NodeJS.&lt;/p&gt;

&lt;p&gt;It will focus on commands available in the VS Code interface rather than command line arguments as seen at: &lt;a href=&quot;https://aka.ms/iotedgedev&quot;&gt;https://aka.ms/iotedgedev&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;azure-iot-sdks&quot;&gt;Azure IoT SDKs&lt;/h2&gt;

&lt;p&gt;Azure IoT Edge has a number of &lt;a href=&quot;https://github.com/Azure/azure-iot-sdks&quot;&gt;SDKs&lt;/a&gt; for module development in your favourite language.  The &lt;a href=&quot;https://github.com/Azure/azure-iot-sdks&quot;&gt;SDK code&lt;/a&gt; will handle setting up environment variables and provide the boiler plate code necessary to send and receive messages using multiple &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols&quot;&gt;protocols &amp;amp; channels  (e.g. MQTT, AMQP)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-vs-code-to-run-the-local-simulator&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols&quot;&gt;Setting up VS Code to run the local simulator&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Given the solution is cloned locally and Azure is setup with our IOT Hub we can configure a device to act as a local simulator.&lt;/p&gt;

&lt;p&gt;1. Select IOT Hub &amp;amp; choose your IOT Hub&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226837-4390bb80-6bb6-11ea-8a88-e03f10cc02eb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2. Create IOT Edge Device - I have named my local device ‘&lt;em&gt;LocalSimulator&lt;/em&gt; ‘&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226840-4ab7c980-6bb6-11ea-8380-b0656965b968.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3. Setup IOT Edge Simulator – this will create you edge certs&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226898-bd28a980-6bb6-11ea-99cb-3f5a35dce53a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will generate and install certificates for local development in the following folder &amp;amp; also install the for you &lt;em&gt;note://run VS Code as admin for this&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226845-5905e580-6bb6-11ea-881e-46ca8640529b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-module-for-our-solution&quot;&gt;Creating a module for our solution&lt;/h2&gt;

&lt;p&gt;Right click on the modules folder and select ‘Add IoT Edge Module’.&lt;/p&gt;

&lt;p&gt;This will then ask a module name &amp;amp; language (C,C#,Java,Node.js, Python)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226850-615e2080-6bb6-11ea-9775-f2a18775b707.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have created numerous custom modules for this solution. For this post we focus on the below 6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226855-67ec9800-6bb6-11ea-9af9-3bf33e1fbc44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-generators&quot;&gt;Data Generators&lt;/h2&gt;

&lt;p&gt;The demo code shows 3 ‘data generator’ modules written in C#, Python &amp;amp; Node JS.&lt;/p&gt;

&lt;p&gt;Each module publishes a message every second simulating temperature capture.  Properties of the sent message are:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/0299fe4f6f81f7bebdb2792cec935508.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In C# connecting to the Edge Hub and sending messages can be seen in the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/4a0769a626f433fb25903318b88c5311.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;data-recorders&quot;&gt;Data Recorders&lt;/h2&gt;

&lt;p&gt;3 modules in matching languages subscribe to their respective modules published messages&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/9b1a3923f31a657fa3a6ff9f1a9e417a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Messages received are deserialized from JSON format to a POCO and then saved in a database.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/0fc37bda378ea94f694a2de8c1ca7a6e.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;routes&quot;&gt;Routes&lt;/h2&gt;

&lt;p&gt;In order to route messages between modules we use the inbuilt route system in our &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/deployment.debug.template.json&quot;&gt;deployment template&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226859-75a21d80-6bb6-11ea-9723-f7f977688da2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;web-app--viewer-module&quot;&gt;Web App – Viewer module&lt;/h2&gt;

&lt;p&gt;Finally to view the messages from a web page I have modified an &lt;a href=&quot;https://github.com/Azure-Samples/iot-edge-hmi-module&quot;&gt;existing demo to&lt;/a&gt; that uses SignalR view all messages sent to it from the below routes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226864-7a66d180-6bb6-11ea-8e78-30165268a5d3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When running the solution you can view all published messages on the web page below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77226868-7f2b8580-6bb6-11ea-991e-f88f499d70b7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Here was a basic overview of an demo solution to create and build your own custom IoT Edge modules.&lt;/p&gt;

&lt;p&gt;Next we will introduce an existing docker container (&lt;a href=&quot;https://nifi.apache.org/&quot;&gt;https://nifi.apache.org/)&lt;/a&gt;) to act as a data orchestrator. This will subscribe to all ‘Payload’ messages and publish a message to ‘turn off’ the air conditioner when the temperature is too high.&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Series</summary></entry><entry><title type="html">Azure IoT Edge- Who is cooler? dotnet, node or python?</title><link href="http://0.0.0.0:4000/2020/02/13/azure-iot-edge-who-is-cooler-dotnet-node-python.html" rel="alternate" type="text/html" title="Azure IoT Edge- Who is cooler? dotnet, node or python?" /><published>2020-02-13T00:00:00-06:00</published><updated>2020-02-13T00:00:00-06:00</updated><id>http://0.0.0.0:4000/2020/02/13/azure-iot-edge-who-is-cooler-dotnet-node-python</id><content type="html" xml:base="http://0.0.0.0:4000/2020/02/13/azure-iot-edge-who-is-cooler-dotnet-node-python.html">&lt;h1 id=&quot;series&quot;&gt;Series&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-who-is-cooler-dotnet-node-or-python-369m&quot;&gt;Part 1 - dotnet vs python vs node - temperature emission - who is cooler?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-developing-custom-modules-df3&quot;&gt;Part 2 - Developing modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-3rd-party-containers-3mi3&quot;&gt;Part 3 - Custom Containers using Apache Nifi&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-timescaledb-on-the-edge-2ec1&quot;&gt;Part 4 - Custom Module using TimescaleDB&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dev.to/chris_mckelt/azure-iot-edge-using-grafana-on-the-edge-26na&quot;&gt;Part 5 - Custom Module using Grafana&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;file:///C:/temp/Part%205%20-%20Custom%20Module%20using%20Grafana&quot;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;This code will run through creating an end to end demo of building &amp;amp; deploying an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-edge/about-iot-edge&quot;&gt;Azure IoT Edge solution&lt;/a&gt; solution.&lt;/p&gt;

&lt;p&gt;Code for this example lives here&lt;/p&gt;

&lt;h5 id=&quot;httpsgithubcomchrismckeltedgy&quot;&gt;&lt;a href=&quot;https://github.com/chrismckelt/edgy&quot;&gt;https://github.com/chrismckelt/edgy&lt;/a&gt;&lt;/h5&gt;

&lt;h2 id=&quot;what-are-we-building&quot;&gt;What are we building?&lt;/h2&gt;

&lt;p&gt;This solution demonstrates an air-conditioning monitoring system where 3 room sensors are publishing their temperature over time.   When a room gets too hot the air conditioner for that room is turned on. Once the room is cooled it is turned off.&lt;/p&gt;

&lt;p&gt;Three ‘data generator’ modules publish a message with the following properties.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Timestamp&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Temperature&lt;/em&gt; –   room temp in Celsius&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;IsAirConditionerOn&lt;/em&gt; – true/false&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;TagKey&lt;/em&gt; – room name (in this case  dotnet, node, python)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Three ‘data recorder’ modules subscribe to the published temperature messages and save the data in a time series database.&lt;/p&gt;

&lt;p&gt;A custom module will listen to all temperature messages and analyse when a room is too hot. Sending a message to turn the rooms air conditioner on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76138797-6afb6a80-6085-11ea-93dd-2a8fda17583a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo-focus-areas&quot;&gt;Demo Focus Areas&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;show local debug/development options &amp;amp;  remote/real deployment&lt;/li&gt;
  &lt;li&gt;how to create and configure an Azure IOT Hub environment in Azure &lt;a href=&quot;https://github.com/chrismckelt/edgy/tree/master/scripts/environment&quot;&gt;using Azure CLI scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;coding custom modules in .Net, Python, NodeJS (sorry Java)&lt;/li&gt;
  &lt;li&gt;using existing &lt;a href=&quot;https://aka.ms/iot-edge-marketplace&quot;&gt;Azure IoT Edge marketplace&lt;/a&gt; modules&lt;/li&gt;
  &lt;li&gt;using non-edge marketplace modules (docker images) to save data with &lt;a href=&quot;https://www.timescale.com/&quot;&gt;Timescale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;connecting a data flow engine ( &lt;a href=&quot;https://nifi.apache.org/&quot;&gt;Apache Nifi&lt;/a&gt;) to the Edge &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-mqtt-support&quot;&gt;MQTT Broker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;viewing the data through a &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; dashboard.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;In order to develop solutions for the edge:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/iot-edge/how-to-vs-code-develop-module&quot;&gt;Developing custom modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Setup your machine using the &lt;a href=&quot;https://github.com/Azure/iotedgedev&quot;&gt;Azure IoT EdgeHub Dev Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I recommend installing these &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.azure-iot-edge&quot;&gt;VS code extensions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I recommend using &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt; for docker management both locally &amp;amp; on the deployed edge solution&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;portainer-running-on-httplocalhost9000&quot;&gt;Portainer running on &lt;a href=&quot;http://localhost:9000/&quot;&gt;http://localhost:9000/&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76701501-ae487f80-66fc-11ea-861a-2f04c19bdf56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;solution-overview&quot;&gt;Solution Overview&lt;/h2&gt;

&lt;h2 id=&quot;azure-setup&quot;&gt;Azure Setup&lt;/h2&gt;

&lt;p&gt;You will need an &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/iot-hub/&quot;&gt;Azure IoT Hub&lt;/a&gt; setup in Azure.   For this demo I am using the free tier&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The IoT Hub Free Edition is intended to encourage proof of concept projects. It enables you to transmit up to a total of 8,000 messages per day, and register up to 500 device identities. The device identity limit is only present for the Free Edition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To build the environment I have used the Azure CLI and created scripts found &lt;a href=&quot;https://github.com/chrismckelt/edgy/tree/master/scripts/environment&quot;&gt;here&lt;/a&gt;.   Run the top 3 on your selected subscription to create the artefacts in Azure below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//77835944-caccc900-718c-11ea-815a-b75fc729905b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//75735359-75d89700-5d35-11ea-8b46-9e5be2274d46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;p&gt;The code contains the docker build files , code &amp;amp; scripts to create the following modules&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//75736364-fa2c1980-5d37-11ea-99f9-42eb41fb7ea1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h4 id=&quot;descriptions-of-folders-and-files&quot;&gt;Descriptions of folders and files&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Folder /  File&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;config&lt;/td&gt;
      &lt;td&gt;automatically generate files from the deployment.templates.json (debug or prod) that are used to deploy the solution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;modules&lt;/td&gt;
      &lt;td&gt;custom code, docker images for your IOT Edge solution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;scripts&lt;/td&gt;
      &lt;td&gt;code to create the environment, build the code/docker images and deploy the solution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tools&lt;/td&gt;
      &lt;td&gt;certificate generator and other tools for solution support&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.env&lt;/td&gt;
      &lt;td&gt;holds environment variables that populate the generated config files from the templates&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;deployment.debug.template.json&lt;/td&gt;
      &lt;td&gt;  creates a file in the /config folder called ‘deployment.debug.json’ that populates environment variables, used for local development&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;deployment.prod.template.json&lt;/td&gt;
      &lt;td&gt;creates a file in the /config folder called ‘deployment.prod.json’ that populates environment variables, used for production like deployment&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;solution-structure-overview&quot;&gt;Solution Structure Overview&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//75339444-81f2cd80-58cb-11ea-8c08-eb485e8b5e4b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;azure-iot-edge-devices&quot;&gt;Azure IOT Edge Devices&lt;/h2&gt;

&lt;p&gt;The solution used 3 devices which will be setup in a future post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76172689-62b14580-61d3-11ea-8dd5-26fb9c1f4d40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-local-simulator&quot;&gt;1. Local Simulator&lt;/h3&gt;

&lt;h5 id=&quot;a-simulated-local-environment-using-the-azure-iot-edge-hub-development-simulator-to-run-against-the-iot-hub-when-developing-for-the-edge-it-is-recommended-not-to-install-the-real-iot-edge-runtime-on-your-machine-but-instead-use-the-simulator&quot;&gt;A simulated local environment using the &lt;a href=&quot;https://github.com/Azure/iotedgehubdev&quot;&gt;Azure IoT Edge Hub Development simulator to run against the IOT Hub.&lt;/a&gt;   When developing for the edge it is recommended not to install &lt;a href=&quot;https://docs.microsoft.com/bs-latn-ba/Azure/iot-edge/how-to-install-iot-edge-linux&quot;&gt;the real ‘IOT edge runtime’&lt;/a&gt; on your machine but instead use the simulator.&lt;/h5&gt;

&lt;h3 id=&quot;2-local-device&quot;&gt;2. Local Device&lt;/h3&gt;

&lt;h5 id=&quot;linux-ubuntu-machine-hosted-in-vmware-on-my-local-machine-using-hyper-v&quot;&gt;Linux Ubuntu machine hosted in VMWare on my local machine using Hyper V&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/bs-latn-ba/Azure/iot-edge/how-to-install-iot-edge-linux&quot;&gt;https://docs.microsoft.com/bs-latn-ba/Azure/iot-edge/how-to-install-iot-edge-linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76173281-1d901200-61d9-11ea-9a9c-bdceacf476c9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-cloud-device&quot;&gt;3. Cloud Device&lt;/h3&gt;

&lt;h5 id=&quot;linux-ubuntu-hosted-on-azure-in-our-resource-group-created-using-this-script&quot;&gt;Linux Ubuntu hosted on Azure in our resource group &lt;a href=&quot;https://github.com/chrismckelt/edgy/blob/master/scripts/environment/init.ps1&quot;&gt;created using this script&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;This uses the pre-existing &lt;a href=&quot;https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft_iot_edge.iot_edge_vm_ubuntu?tab=overview&quot;&gt;Linux Ubuntu image from the Azure Marketplace&lt;/a&gt;  with the runtime installed.&lt;/p&gt;

&lt;p&gt;Once up and running VS Code will show the devices below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/662868/76172706-870d2200-61d3-11ea-8c02-eb29f5813075.png&quot; title=&quot;https://user-images.githubusercontent.com/662868/76172706-870d2200-61d3-11ea-8c02-eb29f5813075.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76172706-870d2200-61d3-11ea-8c02-eb29f5813075.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;outro&quot;&gt;Outro&lt;/h1&gt;

&lt;p&gt;Now we have a view of the setup, development environment &amp;amp; code, we can move onto the next post &lt;a href=&quot;http://blog.mckelt.com/2020/03/09/azure-iot-edge-developing-custom-modules/&quot;&gt;‘Developing custom modules for Azure IoT Edge’&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Series</summary></entry><entry><title type="html">Using Azure Pipelines to restore a production database to another environment</title><link href="http://0.0.0.0:4000/2019/08/28/using-azure-pipelines-to-restore-a-production-database-to-another-environment.html" rel="alternate" type="text/html" title="Using Azure Pipelines to restore a production database to another environment" /><published>2019-08-28T00:00:00-05:00</published><updated>2019-08-28T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/08/28/using-azure-pipelines-to-restore-a-production-database-to-another-environment</id><content type="html" xml:base="http://0.0.0.0:4000/2019/08/28/using-azure-pipelines-to-restore-a-production-database-to-another-environment.html">&lt;p&gt;Often we need a fresh copy of the production database in another environment (eg DEV/TEST/UAT). &lt;/p&gt;

&lt;p&gt;Previously this was a tedious task involving getting a backup file, copying it to another location, restoring the database.   Here is a solution to automate this process using Azure Pipelines.&lt;/p&gt;

&lt;h3 id=&quot;user-story&quot;&gt;User Story&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given a production database exists in subscription 1  
When we do a release of the Azure Pipeline named ‘_Refresh Database – DEV’_  
Then an copy of production is available in the DEV environment in subscription 2  
And permissions are correct for the DEV environment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pipeline-overview&quot;&gt;Pipeline Overview&lt;/h2&gt;

&lt;p&gt;For each environment that you wish to restore into create an Azure Pipeline with 3 stages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/662868/120557358-5c3e6780-c430-11eb-981e-62d5bb843cbf.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create variable groups that are &lt;strong&gt;scoped to specific stages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each variable group contains deployment credentials that the specific stage will require to perform operations within the specific Azure Subscription.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/662868/120557271-3fa22f80-c430-11eb-906c-2475ac31de34.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-1---export&quot;&gt;Task 1 - Export&lt;/h3&gt;

&lt;p&gt;Create a PowerShell task to run a script and pass it the information for the production environment.&lt;/p&gt;

&lt;p&gt;This runs against the production environment and creates a blog storage container that holds the exported BACPAC&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/662868/120557372-62ccdf00-c430-11eb-8ab3-8ee0d5566c69.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;view-code-for-script-production-exportps1&quot;&gt;&lt;a href=&quot;https://gist.github.com/chrismckelt/cc3c2ea53d8500b7c02e3da43513cbae&quot;&gt;View code for script production-export.ps1&lt;/a&gt;&lt;/h6&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/cc3c2ea53d8500b7c02e3da43513cbae.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;results-in-production-once-this-script-run-should-show-the-database-bacpac-export&quot;&gt;Results in production once this script run should show the database BACPAC export&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/662868/120558018-67de5e00-c431-11eb-8368-fcd759e10a99.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;task-2--import&quot;&gt;Task 2 – Import&lt;/h3&gt;

&lt;p&gt;Under the ‘import’ stage create a task that will import the BACPAC from the storage container in the production subscription.  This uses both production and the environment credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/662868/120557389-695b5680-c430-11eb-9c55-6f074e5a42d8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;view-code-for-script-production-importps1&quot;&gt;&lt;a href=&quot;https://gist.github.com/chrismckelt/629f992935f9a6aa6701e2c69ae49358&quot;&gt;View code for script production-import.ps1&lt;/a&gt;&lt;/h6&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/629f992935f9a6aa6701e2c69ae49358.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;task-3--sanitise&quot;&gt;Task 3 – Sanitise&lt;/h3&gt;

&lt;p&gt;Create a 3rd task in the ‘Sanitise’ stage. &lt;/p&gt;

&lt;p&gt;This will scramble any  information you do not want in that environment (eg emails).&lt;/p&gt;

&lt;p&gt;Also remove any Production SQL user account and replace them with environment specific&lt;/p&gt;

&lt;h6 id=&quot;view-code-for-script-sanitise&quot;&gt;&lt;a href=&quot;https://gist.github.com/chrismckelt/f1dcefb52db6e79b8e5514853067e774&quot;&gt;View code for script sanitise&lt;/a&gt;&lt;/h6&gt;

&lt;script src=&quot;https://gist.github.com/chrismckelt/f1dcefb52db6e79b8e5514853067e774.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tada&quot;&gt;Tada!&lt;/h2&gt;

&lt;p&gt;Running the pipeline now copies the database to the DEV environment. Typically after this will run a software build which will automatically apply schema changes currently in DEV in the database. Happy restoring!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/662868/120557416-76784580-c430-11eb-87af-44da7c102fd1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Often we need a fresh copy of the production database in another environment (eg DEV/TEST/UAT). </summary></entry><entry><title type="html">Azure Service offering</title><link href="http://0.0.0.0:4000/2019/08/15/azure-service-offering-2.html" rel="alternate" type="text/html" title="Azure Service offering" /><published>2019-08-15T00:00:00-05:00</published><updated>2019-08-15T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/08/15/azure-service-offering-2</id><content type="html" xml:base="http://0.0.0.0:4000/2019/08/15/azure-service-offering-2.html">&lt;h2 id=&quot;cloud-adoption-framework&quot;&gt;Cloud Adoption Framework&lt;/h2&gt;

&lt;p&gt;For organisations just starting out their journey and those looking to better their governance structure, we facilitate and deliver the Microsoft Cloud Adoption Framework.&lt;/p&gt;

&lt;p&gt;This will give your organisation a future plan on how to move and operate a governed Azure enterprise environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2019/07/clip_image002.jpg&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/clip_image002_thumb.jpg&quot; alt=&quot;clip_image002&quot; title=&quot;clip_image002&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To provide optimal cloud infrastructure we will help you&lt;/p&gt;

&lt;p&gt;· Connect your on-premise Active Directory to Azure Active Directory (AAD) ​ · Connect your on-premise network to Azure · Setup Azure Security Centre to continuously monitor and assess your environment​&lt;/p&gt;

&lt;p&gt;· Re-host through PAAS/Containers/ VMs using &lt;a href=&quot;https://azure.microsoft.com/en-us/services/azure-migrate/&quot;&gt;Azure Migrate&lt;/a&gt; · Re-factor to serverless · Re-architect to use existing Azure services&lt;/p&gt;

&lt;h2 id=&quot;azure-integration-services&quot;&gt;Azure Integration Services&lt;/h2&gt;

&lt;p&gt;Azure integration services provide an enterprise ready, event-based, serverless compute experience that drives efficiency and consistency when connecting applications across the Cloud and on-premise.&lt;/p&gt;

&lt;p&gt;We have expertise in enterprise messaging services and couple this with modern software design patterns focusing on serverless iPAAS (integration Platform as a Service). This allow our solutions to scale on demand and automatically react and respond to issues. Monitoring and alerting are built into the platform allowing quick identification and resolution for system failures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2019/07/clip_image004.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/clip_image004_thumb.png&quot; alt=&quot;clip_image004&quot; title=&quot;clip_image004&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;workload-migration&quot;&gt;Workload Migration&lt;/h2&gt;

&lt;p&gt;We identify workloads that make sense to migrate to the cloud. Where doing so has numerous benefits from cost savings to maintainability.&lt;/p&gt;

&lt;p&gt;We assess applications, networks, databases and virtual machines on benefits attained from migration and implement a plan to migrate them through the following process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2019/07/clip_image006.jpg&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/clip_image006_thumb.jpg&quot; alt=&quot;clip_image006&quot; title=&quot;clip_image006&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;governance&quot;&gt;Governance&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/azure_cloud_adoption.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;microsoft-cloud-services&quot;&gt;Microsoft Cloud Services&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Platform
    &lt;ul&gt;
      &lt;li&gt;API Management&lt;/li&gt;
      &lt;li&gt;IaaS &amp;amp; PaaS&lt;/li&gt;
      &lt;li&gt;Hybrid (cloud &amp;amp; on-premise)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Application
    &lt;ul&gt;
      &lt;li&gt;API first&lt;/li&gt;
      &lt;li&gt;Microservices&lt;/li&gt;
      &lt;li&gt;Serverless&lt;/li&gt;
      &lt;li&gt;Web services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Integration
    &lt;ul&gt;
      &lt;li&gt;Microsoft products and services (i.e. D365 CE, D365 FO, Business Central, PowerBI)&lt;/li&gt;
      &lt;li&gt;Non Microsoft Services (i.e. SalesForce, HubSpot, IBM Maximo, SAP, Sage Micropay, Concur, Equifax, Green ID, Xplan)&lt;/li&gt;
      &lt;li&gt;Banks - CBA, ANZ,Nab, BankStatements.com.au, Open Banking&lt;/li&gt;
      &lt;li&gt;Sage Micropay&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security
    &lt;ul&gt;
      &lt;li&gt;Application (OAuth, SAML, OpenID)&lt;/li&gt;
      &lt;li&gt;Platform (RBAC, Policies)&lt;/li&gt;
      &lt;li&gt;IAM (Identity &amp;amp; Access Management)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IOT
    &lt;ul&gt;
      &lt;li&gt;Device&lt;/li&gt;
      &lt;li&gt;Edge&lt;/li&gt;
      &lt;li&gt;Hub&lt;/li&gt;
      &lt;li&gt;Data &amp;amp; BI integration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Migration
    &lt;ul&gt;
      &lt;li&gt;On-Premise to Cloud&lt;/li&gt;
      &lt;li&gt;Azure DevOps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ALM (Alerting, Logging &amp;amp; Monitoring)
    &lt;ul&gt;
      &lt;li&gt;Application&lt;/li&gt;
      &lt;li&gt;Platform&lt;/li&gt;
      &lt;li&gt;Costing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;devops&quot;&gt;DevOps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Application life cycle management&lt;/li&gt;
  &lt;li&gt;Continuous integration and delivery&lt;/li&gt;
  &lt;li&gt;Automated testing&lt;/li&gt;
  &lt;li&gt;Agile development approach&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mlops&quot;&gt;&lt;a href=&quot;https://dev.to/axurcio&quot;&gt;MLOps&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/axurcio&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/automated-machine-learning.png&quot; alt=&quot;machine-learning&quot; /&gt; &lt;img src=&quot;https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg&quot; alt=&quot;Axurcio's DEV Profile&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Cloud Adoption Framework</summary></entry><entry><title type="html">NDepend code analysis</title><link href="http://0.0.0.0:4000/2019/07/02/ndepend.html" rel="alternate" type="text/html" title="NDepend code analysis" /><published>2019-07-02T00:00:00-05:00</published><updated>2019-07-02T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/07/02/ndepend</id><content type="html" xml:base="http://0.0.0.0:4000/2019/07/02/ndepend.html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Recently I was asked to inspect and old VB.Net Windows Forms &amp;amp; SQL Server application to see determine its future life.  Part of this technical review was analysing the code base and database structure.&lt;/p&gt;

&lt;p&gt;To analyse the code base I used &lt;a href=&quot;https://www.ndepend.com/&quot;&gt;NDepend&lt;/a&gt; a well-known code quality analysis tool that has progressed by &lt;a href=&quot;https://www.ndepend.com/release-notes&quot;&gt;leaps and bounds&lt;/a&gt; since I last used it on the build server circa 2013 (then version 5).  Now on version &lt;a href=&quot;https://www.ndepend.com/release-notes#V2019_2_4&quot;&gt;2019.2.4&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;application-overview&quot;&gt;Application Overview&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;.Net 4.6 Windows Forms&lt;/li&gt;
  &lt;li&gt;SQL Server database where most of the logic resides (some in the GUI)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76383664-7f967600-6397-11ea-8a88-09dd02fa4f82.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;After installing NDepend you will get a menu icon in Visual Studio&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76383668-858c5700-6397-11ea-80bb-966b0214ef1a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next setup the NDepend project for analysis.  Within Visual Studio I select the projects and references I wish to include in the analysis.  I am also able to include 2 extra DLLs that the vendor bundled with the application (but did not provide the source code)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2019/07/image-4.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//image_thumb-4.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next tab I setup the Analysis settings and output location.   This will enable NDepend to perform a time-based analysis to see how the solution has progressed/regressed since the last analysis.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2019/07/image-5.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//image_thumb-5.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-the-analysis&quot;&gt;Running the Analysis&lt;/h2&gt;

&lt;p&gt;The analysis tool may be run and viewed from inside Visual Studio or output as a HTML file (great for the build server report).&lt;/p&gt;

&lt;h3 id=&quot;application-metrics&quot;&gt;Application Metrics&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76384667-88d51200-639a-11ea-8e1e-c72c9e3abb1b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;quality-gates&quot;&gt;Quality Gates&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76384677-912d4d00-639a-11ea-86ba-c2b4b208b876.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dependency-graph&quot;&gt;Dependency Graph&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76384692-9c807880-639a-11ea-9bd3-8f8d67a32200.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dependence-matrix&quot;&gt;Dependence Matrix&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76384954-5f68b600-639b-11ea-890c-c399af02a0f1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cyclomatic-complexity&quot;&gt;Cyclomatic Complexity&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cyclomatic complexity&lt;/strong&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_metric&quot;&gt;software metric&lt;/a&gt; used to indicate the complexity of a program. It is a quantitative measure of the number of linearly independent paths through a program’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Source_code&quot;&gt;source code&lt;/a&gt;. It was developed by &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Thomas_J._McCabe,_Sr.&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;Thomas J. McCabe, Sr.&lt;/a&gt; in 1976.&lt;/p&gt;

&lt;p&gt;Cyclomatic complexity is computed using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_flow_graph&quot;&gt;control flow graph&lt;/a&gt; of the program: the nodes of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)&quot;&gt;graph&lt;/a&gt; correspond to indivisible groups of commands of a program, and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Directed_graph&quot;&gt;directed&lt;/a&gt; edge connects two nodes if the second command might be executed immediately after the first command. Cyclomatic complexity may also be applied to individual &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_(computer_science)&quot;&gt;functions&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_programming&quot;&gt;modules&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Method_(computer_science)&quot;&gt;methods&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_(computer_science)&quot;&gt;classes&lt;/a&gt; within a program.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76384702-a4d8b380-639a-11ea-9fa8-a1121ba1e34f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;KEY AREAS TO REDUCE COMPLEXITY ARE&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPS.UI.ProjectDataSetTableAdapters – code that handles retrieving/saving projects&lt;/li&gt;
  &lt;li&gt;CPS.UI.AdminDataSetTableAdapters – code that handles retrieving/saving admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally remove the use of data sets/adapters as a data access pattern and move to a modern-day best practice solution (entity framework, dapper).&lt;/p&gt;

&lt;h3 id=&quot;theabstractness-versus-instability-diagram&quot;&gt;The Abstractness versus Instability Diagram&lt;/h3&gt;

&lt;p&gt;The Abstractness versus Instability Diagram helps to detect which assemblies are potentially painful to maintain (i.e concrete and stable) and which assemblies are potentially useless (i.e abstract and instable).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Abstractness: If an assembly contains many abstract types (i.e interfaces and abstract classes) and few concrete types, it is considered as abstract.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instability: An assembly is considered stable if its types are used by a lot of types from other assemblies. In this context stable means painful to modify.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Online documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ndepend.com/docs/code-metrics#MetricsOnAssemblies&quot;&gt;Definitions of related Code Metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//76385021-950d9f00-639b-11ea-93b4-9f577f7cc6d4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;This post is a Work in Progress – stay tuned as I update it over time and determine the best use for NDepend as I have requested changes by the Vendor to fix areas of the code.  NDepend will be the tool I use that helps me guide the vendors code quality.&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Intro</summary></entry><entry><title type="html">Reactive architecture with event grid</title><link href="http://0.0.0.0:4000/2019/04/27/reactive-architecture-with-event-grid.html" rel="alternate" type="text/html" title="Reactive architecture with event grid" /><published>2019-04-27T00:00:00-05:00</published><updated>2019-04-27T00:00:00-05:00</updated><id>http://0.0.0.0:4000/2019/04/27/reactive-architecture-with-event-grid</id><content type="html" xml:base="http://0.0.0.0:4000/2019/04/27/reactive-architecture-with-event-grid.html">&lt;p&gt;Azure Global Bootcamp – 27th April 2019&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images//2019/04/image.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/image_thumb.png&quot; alt=&quot;image&quot; title=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrismckelt/chrismckelt.github.io/master/_posts/posts/images/highres_480710988.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/ghutvssiyyt6otq/azure-global-bootcamp-event-grid-2019.pptx?dl=0&quot;&gt;Slides here&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris McKelt</name></author><category term="posts" /><summary type="html">Azure Global Bootcamp – 27th April 2019</summary></entry></feed>